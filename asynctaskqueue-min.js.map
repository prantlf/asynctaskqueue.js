{
  "version": 3,
  "sources": ["asynctaskqueue.js"],
  "sourcesContent": ["//     asynctaskqueue.js 2.0.4\n//     https://github.com/prantlf/asynctaskqueue.js\n//     (c) 2014-2012 Ferdinand Prantl <prantlf@gmail.com>\n//     Freely distributable under the MIT license\n\n// ## Environment Detection\n\n// Immediate function which gathers dependencies, calls the implementation\n// factory and exposes the `AsyncTaskQueue` object according to the\n// JavaScript environment.  Underscore.js is required for the ECMAScript5\n// compatibility in older web browsers and JQuery is required for the\n// support of (deferred) promises.\n(function (window, factory) {\n\n  // Variables to support non-conflicting loading in the web browser.\n  var OldAsyncTaskQueue, AsyncTaskQueue;\n\n  // Register the Queue object in the AMD environment, depending\n  // on Underscore.js and jQuery.\n  if (typeof define !== \"undefined\" && define.amd) {\n    define(\"asynctaskqueue\", [ \"underscore\", \"jquery\" ], function (_, $) {\n      // Return the Queue object as the module export.\n      return factory(_, $);\n    });\n\n  // Detect a CommonJS module and ask for Underscore.js and jQuery.\n  } else if (typeof module !== \"undefined\" &&\n             typeof module.exports !== \"undefined\") {\n    const _ = require(\"underscore\");\n    const jQuery = require(\"jquery\");\n    // Expose the Queue object as the only module export.\n    module.exports = factory(_, jQuery);\n\n  // Detect the web browser and check that Underscore.js and jQuery were\n  // included before ths script.\n  } else if (typeof window !== \"undefined\") {\n    if (typeof _ === \"undefined\") {\n      throw new Error(\"Underscore.js not detected.\")\n    }\n    if (typeof jQuery === \"undefined\") {\n      throw new Error(\"JQuery not detected.\")\n    }\n    // Expose the Queue object globally and give the user a chance to restore\n    // the global namespace by calling the noConflict function.\n    OldAsyncTaskQueue = window.AsyncTaskQueue;\n    window.AsyncTaskQueue = AsyncTaskQueue = factory(_, jQuery);\n\n    // ### Non-conflicting Integration\n\n    // Restores the global value of `AsyncTaskQueue` which existed before\n    // this script was loaded and returns the `AsyncTaskQueue` exported by\n    // this script so that it can be stored in a local variable.\n    AsyncTaskQueue.noConflict = function () {\n      window.AsyncTaskQueue = OldAsyncTaskQueue;\n      return AsyncTaskQueue;\n    }\n\n  // No way to expose the public objects without knowing where we are.\n  } else {\n    throw new Error(\"JavaScript environment not recognized.\")\n  }\n\n// ## Module Implementation\n\n// Passes dependencies from the global environment and the factory function\n// encapsulating the `AsyncTaskQueue` implementation to the immediate\n// initialization function.\n}(typeof window !== \"undefined\" ? window : this, function (_, $) {\n\n  // ### Task Wrapper\n\n  // Represents a pending task in the queue.\n  //\n  // The _worker_ is a (function) callback to execute, which must return\n  // a promise and reject it with an Error or just throw in case of a\n  // failure.\n  // The _options_ is an optional parameter passed to `Queue.enqueue`.\n  function Task(worker, options) {\n    this.worker = worker;\n    this.deferred = $.Deferred();\n  }\n\n  _.extend(Task.prototype, {\n\n    // Returns a promise for the result of the task worker.\n    // When the task is scheduled for execution, the promise `progress` is\n    // triggered with `{ scheduled: true }`.  Other states are relayed from\n    // the promise returned by the worker.\n    promise: function () {\n      return this.deferred.promise();\n    }\n\n  });\n\n  // ### Task Scheduler\n\n  // Provides a FIFO queue scheduler pushing and popping pending tasks.\n  //\n  // The _options_ is an optional parameter passed to `Queue.constructor`.\n  function Scheduler(options) {}\n\n  _.extend(Scheduler.prototype, {\n\n    // Pushes the task to the end of the array to be picked as the last one.\n    push: function (tasks, task) {\n      tasks.push(task);\n    },\n\n    // Pops the (oldest) task from the beginning of the array and returns it.\n    // Returns `undefined` if the array is empty.\n    pop: function (tasks) {\n      return tasks.shift();\n    }\n\n  });\n\n  // ### Task Queue\n\n  // Provides a queue executing tasks.\n  //\n  // The _options_ is an object with the following properties:\n  // * parallelism  - number of tasks run in parallel (`Infinity` by default)\n  // * asynchronous - boolean to schedule the task execution at the next\n  //   VM context switch (`false` by default)\n  // * Task         - object to wrap the workers with (`Task` by default)\n  // * Scheduler    - object to push pending workers to the queue and pop\n  //   them for execution later (`Scheduler` by default)\n  // * scheduler    - the optional parameter to be passed to the\n  //   `Scheduler.constructor`\n  function Queue(options) {\n    options || (options = {});\n    this.parallelism = options.parallelism || Infinity;\n    this.asynchronous = options.asynchronous;\n    if (options.Task) {\n      this.Task = options.Task;\n    }\n    if (options.Scheduler) {\n      this.Scheduler = options.Scheduler;\n    }\n    this.pending = [];\n    this.processing = [];\n    this.deferred = $.Deferred();\n    this.scheduler = new Scheduler(this, options.scheduler);\n  }\n\n  _.extend(Queue.prototype, {\n\n    // Wraps the worker functions passed to `enqueue` to be manageable.\n    Task: Task,\n\n    // Decides how the tasks are pushed to the pending array and in which\n    // order they are popped for execution.\n    Scheduler: Scheduler,\n\n    // #### Public Methods\n\n    // Adds a task to the queue.\n    //\n    // The _task_ is a `Task` object or a (function) callback returning a\n    // promise to be wrapped by a `Task` instance.\n    // The _options_ is an optional parameter to be passed to the\n    // `Task.constructor`.\n    //\n    // Returns the `Task` object added to the queue.\n    enqueue: function (task, options) {\n      if (!(task instanceof this.Task)) {\n        task = new this.Task(task, options);\n      }\n      this.scheduler.push(this.pending, task);\n      this._schedule();\n      return task;\n    },\n\n    // Removes a task from the queue if it is still pending.\n    //\n    // The _task_ is a `Task` object or a (function) callback added to the\n    // queue earlier.\n    //\n    // Returns the `Task` object removed from the queue or `undefined`\n    // if no matching one was found.\n    dequeue: function (task) {\n      var index = this._index(this.pending, task);\n      if (index >= 0) {\n        return this.pending.splice(index, 1)[0];\n      }\n    },\n\n    // Returns a promise for watching the queue state.  A progress\n    // notification is triggered when a task is scheduled for execution.\n    // The promise is resolved when all tasks have been resolved or rejected.\n    // When it happens, the underlying `deferred` object is replaced with a\n    // new one to serve another queue execution.  Subscribers must re-attach\n    // to the new the promise again if they want to be notified about the\n    // other queue execution.\n    promise: function () {\n      return this.deferred.promise();\n    },\n\n    // Returns if the queue has no tasks in pending and processing queues.\n    empty: function () {\n      return !(this.pending.length || this.processing.length);\n    },\n\n    // Pauses scheduling of pending tasks for execution; currently executing\n    // tasks will still continue running.\n    //\n    // Returns this instance for call chaining.\n    pause: function () {\n      this.paused = true;\n      return this;\n    },\n\n    // Resumes scheduling of pending tasks for execution.\n    //\n    // Returns this instance for call chaining.\n    resume: function () {\n      this.paused = false;\n      // When a task execution finishes, another one is scheduled.  But the\n      // pause could be so long that all tasks have been long finished.\n      this._schedule();\n      return this;\n    },\n\n    // Clears the pending tasks in the queue; already executing tasks will\n    // continue running.\n    //\n    // Returns a promise to be resolved when the executing tasks have\n    // finished and the queue has become empty.  *Warning:* the queue promise\n    // cannot not be used for checking for the abortion status if the queue\n    // has been already empty; it wait for another queue run.\n    abort: function () {\n      this.pending = [];\n      return this.processing.length ? this.promise() :\n        $.Deferred.resolve().promise();\n    },\n\n    // #### Private Methods\n\n    // Schedules another task for executing if the queue is not paused\n    // and the maximum degree of parallelism has not been reached yet.\n    _schedule: function () {\n      var task;\n      if (!this.paused &&\n          this.processing.length < this.parallelism &&\n          (task = this.scheduler.pop(this.pending))) {\n        this.processing.push(task);\n        this.deferred.notify({ scheduled: true });\n        this._execute(task);\n        // Do not wait until the task execution has finished; the queue may\n        // be configured to allow parallel task execution.\n        this._schedule();\n      }\n    },\n\n    // Calls the worker function of the task and relays its promise.\n    _execute: function (task) {\n      var self = this;\n      // Extracted to a local function to be callable by various ways.\n      function work() {\n        try {\n          task.worker()\n            .progress(task.deferred.notify)\n            .done(task.deferred.done)\n            .fail(task.deferred.fail)\n            .always(function () {\n              self._finish(task);\n            });\n        // Tasks should singnal error through their promise, but if they meet\n        // a fatal failure, the queue execution should not freeze.\n        } catch (error) {\n          task.deferred.reject(error);\n          self._finish(task);\n        }\n      }\n      if (this.asynchronous) {\n        // `setTimeout(..., 0)` makes the callback wait 4 ms before it can be\n        // executed but `setImmediate` is not available in most web browsers.\n        if (typeof setImmediate !== \"undefined\") {\n          setImmediate(work);\n        } else {\n          setTimeout(work, 0);\n        }\n      } else {\n        // If the workers do asynchronous operations like HTTP requests, the\n        // extra asynchronous worker execution may not be necessary.\n        work();\n      }\n    },\n\n    // Called when a task finished its execution to update the queue state.\n    _finish: function (task) {\n      // Remove the task from the processing array; it will leave the queue.\n      var index = this._index(this.processing, task);\n      this.processing.splice(index, 1);\n      // When new tasks are added after the queue was emptied, it is\n      // considered a new queue execution; the once notified watchers should\n      // not be informed again. Once signalled promise cannot be reset either.\n      if (this.empty()) {\n        this.deferred.resolve();\n        this.deferred = $.Deferred();\n      } else {\n        // If more tasks than the allowed degree of parallelism have been\n        // added to the queue, schedule anoher one now.\n        this._schedule();\n      }\n    },\n\n    // Returns the index of the task in the specified array or -1 if no\n    // matching one was found.  It accepts both `Task` objects and worker\n    // functions to identify the task.\n    _index: function (tasks, task) {\n      var i;\n      if (task instanceof this.Task) {\n        task = task.worker;\n      }\n      for (i = 0; i < tasks.length; ++i) {\n        if (tasks[i].worker === task) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n  });\n\n  Queue.version = \"2.0.4\";\n\n  return Queue;\n\n}));\n\n"],
  "mappings": "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",
  "names": []
}
